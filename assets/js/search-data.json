{
  
    
        "post0": {
            "title": "Exercise",
            "content": "# &quot;cfs ureca&quot; &gt; &quot;exercises for evaluation&quot; - toc: false - branch: master - badges: false - comments: true - hide: true - search_exclude: true . #collapse_show %lsmagic . . Available line magics: %alias %alias_magic %autoawait %autocall %automagic %autosave %bookmark %cat %cd %clear %colors %conda %config %connect_info %cp %debug %dhist %dirs %doctest_mode %ed %edit %env %gui %hist %history %killbgscripts %ldir %less %lf %lk %ll %load %load_ext %loadpy %logoff %logon %logstart %logstate %logstop %ls %lsmagic %lx %macro %magic %man %matplotlib %mkdir %more %mv %notebook %page %pastebin %pdb %pdef %pdoc %pfile %pinfo %pinfo2 %pip %popd %pprint %precision %prun %psearch %psource %pushd %pwd %pycat %pylab %qtconsole %quickref %recall %rehashx %reload_ext %rep %rerun %reset %reset_selective %rm %rmdir %run %save %sc %set_env %store %sx %system %tb %time %timeit %unalias %unload_ext %who %who_ls %whos %xdel %xmode Available cell magics: %%! %%HTML %%SVG %%bash %%capture %%debug %%file %%html %%javascript %%js %%latex %%markdown %%perl %%prun %%pypy %%python %%python2 %%python3 %%ruby %%script %%sh %%svg %%sx %%system %%time %%timeit %%writefile Automagic is ON, % prefix IS NOT needed for line magics. . G cluster_0 layer 1 (Input layer) cluster_1 layer 2 (hidden layer) cluster_2 layer 3 (output layer) x1 a12 x1-&gt;a12 a22 x1-&gt;a22 a32 x1-&gt;a32 x2 x2-&gt;a12 x2-&gt;a22 x2-&gt;a32 x3 x3-&gt;a12 x3-&gt;a22 x3-&gt;a32 O a12-&gt;O a22-&gt;O a32-&gt;O #collapse %matplotlib notebook import matplotlib.pyplot as plt import numpy as np import datetime from matplotlib import animation import random fig, ax = plt.subplots() theta = np.linspace(0.5*np.pi, 2.5*np.pi, 100) # 0.5pi to make it start in the top centre of circle r = np.sqrt(25.0) # radius of circle x = r * np.cos(theta) y = r * np.sin(theta) circumference, = ax.plot(x, y, marker=&#39;o&#39;) # to adjust BOTH the x and y axes such that the width between each divider is the same ax.set_aspect(1) plot_lim = r + 0.25 plt.xlim(-plot_lim, plot_lim) plt.ylim(-plot_lim, plot_lim) clock_timing_label_array = np.linspace(0.5*np.pi, 2.5*np.pi, 13) clock_timing_label_x = (r - 0.2) * np.cos(clock_timing_label_array) clock_timing_label_y = (r - 0.2) * np.sin(clock_timing_label_array) time_coordinates = np.array((clock_timing_label_x, clock_timing_label_y)).T ref_lines = [] for i, (x_pos, y_pos) in enumerate(time_coordinates): if(i != 0): plt.annotate(&quot;{}&quot;.format(i), (-x_pos, y_pos)) # Drawing reference lines to the clock for fun sx = [0, -x_pos] sy = [0, y_pos] l, = ax.plot(sx, sy) ref_lines.append(l) clock_hand_x_array, clock_hand_y_array = [], [] clock_hand, = plt.plot([], [], &#39;r&#39;) clock_hand_ticks = np.linspace(0.5*np.pi, 2.5*np.pi, 61) clock_hand_ticks_x = (r - 0.2) * np.cos(clock_hand_ticks) clock_hand_ticks_y = (r - 0.2) * np.sin(clock_hand_ticks) seconds_coordinates = np.array((clock_hand_ticks_x, clock_hand_ticks_y)).T def init(): return clock_hand, def update(frame): clock_hand_x_array, ydata = [], [] clock_hand_x_array = [0, -frame[0]] clock_hand_y_array = [0, frame[1]] clock_hand.set_data(clock_hand_x_array, clock_hand_y_array) plt.title(&#39;Analog Clock {}&#39;.format(datetime.datetime.now().strftime(&quot;%H:%M:%S&quot;)), fontsize=18) return clock_hand, ani = animation.FuncAnimation(fig, update, frames=seconds_coordinates, init_func=init, blit=True, interval=1000 ) plt.grid(linestyle=&#39;--&#39;) # This part of the code increase the size of the graph since default is too small fig_size = plt.gcf().get_size_inches() #Get current size sizefactor = 1.5 #Set a zoom factor # Modify the current size by the factor plt.gcf().set_size_inches(sizefactor * fig_size) plt.title(&#39;Analog Clock 😃&#39;, fontsize=18) def generate_color(): r = lambda: random.randint(0,255) color = &#39;#{:02x}{:02x}{:02x}&#39;.format(r(), r(), r()) return color def onclick(event): circumference.set_color(generate_color()) def press(event): if event.key==&#39;y&#39;: for l in ref_lines: l.set_color(generate_color()) fig.canvas.mpl_connect(&#39;button_press_event&#39;, onclick) fig.canvas.mpl_connect(&#39;key_release_event&#39;, press) #mpl_connect connects event onclick with string &#39;button_press_event&#39; #plt.savefig(&quot;plot_circle_matplotlib_01.png&quot;, bbox_inches=&#39;tight&#39;) plt.show() . . import pandas as pd df = pd.read_html(&#39;https://en.wikipedia.org/wiki/List_of_S%26P_500_companies&#39;) cik = df[0][[&#39;CIK&#39;]] cik.to_clipboard() . import graphviz def gv(s): return graphviz.Source(&#39;digraph G{ rankdir=&quot;LR&quot;&#39; + s + &#39;; }&#39;) gv(&#39;diagrams[shape=box3d width=1 height=0.7] my -&gt; diagrams -&gt; are-&gt;very; diagrams-&gt;very-&gt;complex; my-&gt;complex&#39;) . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; G diagrams diagrams are are diagrams&#45;&gt;are very very diagrams&#45;&gt;very my my my&#45;&gt;diagrams complex complex my&#45;&gt;complex are&#45;&gt;very very&#45;&gt;complex import numpy as np import matplotlib.pyplot as plt num_pts=12 # number of points on the circle ps = np.arange(num_pts) # j = np.sqrt(-1) pts = (np.exp(2j*np.pi/num_pts)**ps) fig, ax = plt.subplots(1) ax.plot(pts.real, pts.imag , &#39;o&#39;) ax.set_aspect(1) plt.show() . # %matplotlib inline import matplotlib.pyplot as plt from matplotlib import animation, rc from IPython.display import HTML import datetime fig, ax = plt.subplots() ax.set(xlim = (-1.5, 1.5), ylim = (-1.5, 1.5)); plt.axis(&#39;scaled&#39;) ax.add_artist( plt.Circle((0,0), 1.1, fill=False) ) num_pts = 12 # number of points on the circle pts = (np.exp(2j*np.pi/num_pts)** np.arange(num_pts) ) ax.plot(pts.real, pts.imag , &#39;o&#39;) hand, = ax.plot([0, 0], [0, 1]) analogClock = ax.text(0, 0, &#39;20&#39;, ha=&#39;center&#39;, va=&#39;center&#39;) # plt.show() . # animation function. This is called sequentially def animate(i): analogClock.set_text( str(i) ) return (analogClock,) anim = animation.FuncAnimation(fig, animate, interval=1000, blit=True) rc(&#39;animation&#39;, html=&#39;jshtml&#39;) anim . &lt;/input&gt; Once Loop Reflect import numpy as np import pandas as pd df1 = pd.read_stata(&#39;http://www.stata-press.com/data/r11/auto.dta&#39;) df1[4:8] # df1.iloc[4:8,:] . make price mpg rep78 headroom trunk weight length turn displacement gear_ratio foreign . 4 Buick Electra | 7827 | 15 | 4.0 | 4.0 | 20 | 4080 | 222 | 43 | 350 | 2.41 | Domestic | . 5 Buick LeSabre | 5788 | 18 | 3.0 | 4.0 | 21 | 3670 | 218 | 43 | 231 | 2.73 | Domestic | . 6 Buick Opel | 4453 | 26 | NaN | 3.0 | 10 | 2230 | 170 | 34 | 304 | 2.87 | Domestic | . 7 Buick Regal | 5189 | 20 | 3.0 | 2.0 | 16 | 3280 | 200 | 42 | 196 | 2.93 | Domestic | . #df1 = df1[df1.rep78.notna()] df1.rep78 = df1.rep78.astype(&#39;Int8&#39;) . len(df1), df1.shape, df1.size #df1.count() . (74, (74, 12), 888) . df1.groupby(&#39;rep78&#39;).size() . rep78 1 2 2 8 3 30 4 18 5 11 dtype: int64 . df = df1.groupby(&#39;rep78&#39;).agg({&#39;mpg&#39;: [&#39;size&#39;,&#39;mean&#39;, &#39;median&#39;], &#39;price&#39;:&#39;max&#39;, &#39;length&#39;:&#39;min&#39;}) . df = df1.groupby([&#39;rep78&#39;, &#39;foreign&#39;]).size().unstack() #df.index = df.index.astype(&#39;int32&#39;) df . foreign Domestic Foreign . rep78 . 1 2 | 0 | . 2 8 | 0 | . 3 27 | 3 | . 4 9 | 9 | . 5 2 | 9 | . &#39;h&#39; + str(3) . &#39;h3&#39; . def my_aggfunc(arg): return(arg.name + str(len(arg))) df = df1.pivot_table(index=&#39;rep78&#39;, columns=&#39;foreign&#39;, aggfunc=len, margins=True)[&#39;mpg&#39;].fillna(0) #.astype(&#39;int32&#39;) df . foreign Domestic Foreign All . rep78 . 1 2.0 | 0.0 | 2 | . 2 8.0 | 0.0 | 8 | . 3 27.0 | 3.0 | 30 | . 4 9.0 | 9.0 | 18 | . 5 2.0 | 9.0 | 11 | . All 48.0 | 21.0 | 69 | . df1.groupby([&#39;rep78&#39;, &#39;foreign&#39;]).agg({&#39;mpg&#39;: &#39;mean&#39;, &#39;weight&#39;:&#39;max&#39;}) . mpg weight . rep78 foreign . 1.0 Domestic 21.000000 | 3470.0 | . Foreign NaN | NaN | . 2.0 Domestic 19.125000 | 3900.0 | . Foreign NaN | NaN | . 3.0 Domestic 19.000000 | 4840.0 | . Foreign 23.333333 | 2130.0 | . 4.0 Domestic 18.444444 | 4130.0 | . Foreign 24.888889 | 2750.0 | . 5.0 Domestic 32.000000 | 2120.0 | . Foreign 26.333333 | 3170.0 | . for i in [[&#39;x&#39;,&#39;y&#39;], [&#39;a&#39;,&#39;b&#39;]]: vars()[i[0]] = i[1] [x, a] . [&#39;y&#39;, &#39;b&#39;] . df = df1.pivot_table(index=&#39;rep78&#39;, columns=&#39;foreign&#39;, aggfunc=[&#39;mean&#39;], values=[&#39;mpg&#39;], margins=True).fillna(0) df1a = df.T.reset_index(drop=True).T df = df1.pivot_table(index=&#39;rep78&#39;, columns=&#39;foreign&#39;, aggfunc=[&#39;max&#39;], values=[&#39;weight&#39;], margins=True).fillna(0) df1b = df.T.reset_index(drop=True).T df1c = df1a.iloc[0:0] df1c for i in df1a.index: df1c = df1c.append(df1a.loc[i]) df1c = df1c.append(df1b.loc[i]) df1c . 0 1 2 . rep78 . 1.0 21.000000 | 0.000000 | 21.000000 | . 1.0 3470.000000 | 0.000000 | 3470.000000 | . 2.0 19.125000 | 0.000000 | 19.125000 | . 2.0 3900.000000 | 0.000000 | 3900.000000 | . 3.0 19.000000 | 23.333333 | 19.433333 | . 3.0 4840.000000 | 2130.000000 | 4840.000000 | . 4.0 18.444444 | 24.888889 | 21.666667 | . 4.0 4130.000000 | 2750.000000 | 4130.000000 | . 5.0 32.000000 | 26.333333 | 27.363636 | . 5.0 2120.000000 | 3170.000000 | 3170.000000 | . All 19.541667 | 25.285714 | 21.289855 | . All 4840.000000 | 3170.000000 | 4840.000000 | . l = df1.pivot_table(index=&#39;rep78&#39;, columns=&#39;foreign&#39;, aggfunc=[&#39;mean&#39;], values=[&#39;mpg&#39;], margins=True).fillna(0) r = df1.pivot_table(index=&#39;rep78&#39;, columns=&#39;foreign&#39;, aggfunc=[&#39;max&#39;], values=[&#39;weight&#39;], margins=True).fillna(0) d = l.join(r) display(d.columns.levels) d.columns = d.columns.droplevel(0) d.stack(0) # replace droplevel(0) with join(level 0 and 1) # use ordered Categorical . FrozenList([[&#39;max&#39;, &#39;mean&#39;], [&#39;mpg&#39;, &#39;weight&#39;], [&#39;All&#39;, &#39;Domestic&#39;, &#39;Foreign&#39;]]) . foreign All Domestic Foreign . rep78 . 1.0 mpg 21.000000 | 21.000000 | 0.000000 | . weight 3470.000000 | 3470.000000 | 0.000000 | . 2.0 mpg 19.125000 | 19.125000 | 0.000000 | . weight 3900.000000 | 3900.000000 | 0.000000 | . 3.0 mpg 19.433333 | 19.000000 | 23.333333 | . weight 4840.000000 | 4840.000000 | 2130.000000 | . 4.0 mpg 21.666667 | 18.444444 | 24.888889 | . weight 4130.000000 | 4130.000000 | 2750.000000 | . 5.0 mpg 27.363636 | 32.000000 | 26.333333 | . weight 3170.000000 | 2120.000000 | 3170.000000 | . All mpg 21.289855 | 19.541667 | 25.285714 | . weight 4840.000000 | 4840.000000 | 3170.000000 | . df1.plot.scatter(&#39;weight&#39;, &#39;mpg&#39;) . import seaborn as sns sns.lmplot(x=&quot;weight&quot;, y=&quot;mpg&quot;, data=df1, fit_reg=True) . # X = df1[&quot;weight&quot;] # y = df1[&quot;mpg&quot;] # X = sm.add_constant(X) # model = sm.OLS(y, X).fit() # predictions = model.predict(X) # model.summary() . [&#39;inc80&#39;[-2:], (lambda x: [x[:-2], x[-2:]])(&#39;inc80&#39;)] # df[&#39;variable&#39;].apply(lambda x: x[-2:]) . [&#39;80&#39;, [&#39;inc&#39;, &#39;80&#39;]] . import re # .match (first only) vs .findall (all) [ (re.sub(r&#39;( D+)( d+)&#39;, r&#39; 2 1&#39;, &#39;inc80&#39;)), re.split(r&#39;8&#39;, &#39;inc80&#39;), (re.search(r&#39;( D+)( d+)&#39;, &#39;inc80&#39;).groups()) ] . [&#39;80 inc&#39;, [&#39;inc&#39;, &#39;0&#39;], (&#39;inc&#39;, &#39;80&#39;)] . import pandas as pd df2 = pd.read_stata(&#39;http://www.stata-press.com/data/r11/reshape1.dta&#39;) df2 = df2.astype(&#39;int32&#39;) df2 . id sex inc80 inc81 inc82 ue80 ue81 ue82 . 0 1 | 0 | 5000 | 5500 | 6000 | 0 | 1 | 0 | . 1 2 | 1 | 2000 | 2200 | 3300 | 1 | 0 | 0 | . 2 3 | 0 | 3000 | 2000 | 1000 | 0 | 0 | 1 | . [i for i in list(df2.columns) if i[-2:-1]!=&#39;8&#39; ] . [&#39;id&#39;, &#39;sex&#39;] . a = df2.set_index([&#39;id&#39;, &#39;sex&#39;]) for i in a.T : for j in a : display([i, j]) . [(1, 0), &#39;inc80&#39;] . [(1, 0), &#39;inc81&#39;] . [(1, 0), &#39;inc82&#39;] . [(1, 0), &#39;ue80&#39;] . [(1, 0), &#39;ue81&#39;] . [(1, 0), &#39;ue82&#39;] . [(2, 1), &#39;inc80&#39;] . [(2, 1), &#39;inc81&#39;] . [(2, 1), &#39;inc82&#39;] . [(2, 1), &#39;ue80&#39;] . [(2, 1), &#39;ue81&#39;] . [(2, 1), &#39;ue82&#39;] . [(3, 0), &#39;inc80&#39;] . [(3, 0), &#39;inc81&#39;] . [(3, 0), &#39;inc82&#39;] . [(3, 0), &#39;ue80&#39;] . [(3, 0), &#39;ue81&#39;] . [(3, 0), &#39;ue82&#39;] . # for loop table = [] for i in range(df2.shape[0]): temp = df2.iloc[i] for j in range(3): r = [temp[0],80+j,temp[1],temp[2+j],temp[5+j]] table.append(r) pd.DataFrame(table, columns = [&quot;id&quot;,&quot;year&quot;,&quot;sex&quot;,&quot;inc&quot;,&quot;ue&quot;]) . id year sex inc ue . 0 1 | 80 | 0 | 5000 | 0 | . 1 1 | 81 | 0 | 5500 | 1 | . 2 1 | 82 | 0 | 6000 | 0 | . 3 2 | 80 | 1 | 2000 | 1 | . 4 2 | 81 | 1 | 2200 | 0 | . 5 2 | 82 | 1 | 3300 | 0 | . 6 3 | 80 | 0 | 3000 | 0 | . 7 3 | 81 | 0 | 2000 | 0 | . 8 3 | 82 | 0 | 1000 | 1 | . df = df2.melt([&#39;id&#39;, &#39;sex&#39;]) df[[&#39;variable&#39;, &#39;year&#39;]] = df[&#39;variable&#39;] .apply (lambda x: pd.Series([x[:-2], x[-2:]])) #df[[&#39;variable&#39;, &#39;year&#39;]] = df[&#39;variable&#39;].str.extract(&#39;( D+)( d+)&#39;); display(df) df.pivot_table(index=[&#39;id&#39;, &#39;year&#39;, &#39;sex&#39;], columns=&#39;variable&#39;, values = &#39;value&#39;) .reset_index() . variable id year sex inc ue . 0 1 | 80 | 0 | 5000 | 0 | . 1 1 | 81 | 0 | 5500 | 1 | . 2 1 | 82 | 0 | 6000 | 0 | . 3 2 | 80 | 1 | 2000 | 1 | . 4 2 | 81 | 1 | 2200 | 0 | . 5 2 | 82 | 1 | 3300 | 0 | . 6 3 | 80 | 0 | 3000 | 0 | . 7 3 | 81 | 0 | 2000 | 0 | . 8 3 | 82 | 0 | 1000 | 1 | . ## df2 = pd.read_stata(&#39;http://www.stata-press.com/data/r11/reshape1.dta&#39;) df = df2.melt([&#39;id&#39;, &#39;sex&#39;]) df[&#39;year&#39;] = df[&#39;variable&#39;] df[&#39;variable&#39;] = df[&#39;variable&#39;] .apply(lambda x: x[:-2]) df[&#39;year&#39;] = df[&#39;year&#39;] .apply(lambda x: x[-2:]) df.pivot_table(index=[&#39;id&#39;, &#39;year&#39;, &#39;sex&#39;], columns=&#39;variable&#39;, values = &#39;value&#39;) .reset_index() . variable id year sex inc ue . 0 1 | 80 | 0 | 5000 | 0 | . 1 1 | 81 | 0 | 5500 | 1 | . 2 1 | 82 | 0 | 6000 | 0 | . 3 2 | 80 | 1 | 2000 | 1 | . 4 2 | 81 | 1 | 2200 | 0 | . 5 2 | 82 | 1 | 3300 | 0 | . 6 3 | 80 | 0 | 3000 | 0 | . 7 3 | 81 | 0 | 2000 | 0 | . 8 3 | 82 | 0 | 1000 | 1 | . df = df2.melt([&#39;id&#39;, &#39;sex&#39;]) df[[&#39;variable&#39;, &#39;year&#39;]] = df[&#39;variable&#39;] .apply (lambda x: pd.Series([x[:-2], x[-2:]])) df.set_index([&#39;id&#39;, &#39;year&#39;, &#39;sex&#39;, &#39;variable&#39;]) .unstack() . value . variable inc ue . id year sex . 1 80 0 5000 | 0 | . 81 0 5500 | 1 | . 82 0 6000 | 0 | . 2 80 1 2000 | 1 | . 81 1 2200 | 0 | . 82 1 3300 | 0 | . 3 80 0 3000 | 0 | . 81 0 2000 | 0 | . 82 0 1000 | 1 | . df = df2.set_index([&#39;id&#39;, &#39;sex&#39;]).stack().reset_index() df[[&#39;level_2&#39;, &#39;year&#39;]] = df[&#39;level_2&#39;].str.extract(&#39;( D+)( d+)&#39;); df = df.set_index([&#39;id&#39;, &#39;year&#39;, &#39;sex&#39;, &#39;level_2&#39;]).unstack() display(df) [df.shape, df.index.names, df.columns.names, df.columns.levels] . 0 . level_2 inc ue . id year sex . 1 80 0 5000 | 0 | . 81 0 5500 | 1 | . 82 0 6000 | 0 | . 2 80 1 2000 | 1 | . 81 1 2200 | 0 | . 82 1 3300 | 0 | . 3 80 0 3000 | 0 | . 81 0 2000 | 0 | . 82 0 1000 | 1 | . [(9, 2), FrozenList([&#39;id&#39;, &#39;year&#39;, &#39;sex&#39;]), FrozenList([None, &#39;level_2&#39;]), FrozenList([[0], [&#39;inc&#39;, &#39;ue&#39;]])] . Exercise #3 . df3 = pd.read_csv(&#39;http://www.ntu.edu.sg/home/fscheong/public/citycolors.csv&#39;); df3 . a = df3.melt(&#39;city&#39;) b = a.groupby(&#39;city&#39;) .agg({&#39;value&#39;:&#39;max&#39;}) .reset_index() c = a.merge(b, on=&#39;city&#39;) c [c[&#39;value_x&#39;]==c[&#39;value_y&#39;]] [[&#39;city&#39;,&#39;variable&#39;]] .reset_index(drop=True) # .iloc[:,0:2] . MultiIndex Columns Names . cols = pd.MultiIndex.from_tuples([(&quot;a&quot;, &quot;b&quot;), (&quot;a&quot;, &quot;c&quot;)]) df = pd.DataFrame([[1,2], [3,4]], columns=cols) df.columns.names = [&#39;x&#39;, &#39;y&#39;] display(df) #display(df[&#39;a&#39;][[&#39;c&#39;]]) [df.shape, list(df.index), list(df.columns), df.index.names, df.columns.names, df.columns.levels] . x a . y b c . 0 1 | 2 | . 1 3 | 4 | . [(2, 2), [0, 1], [(&#39;a&#39;, &#39;b&#39;), (&#39;a&#39;, &#39;c&#39;)], FrozenList([None]), FrozenList([&#39;x&#39;, &#39;y&#39;]), FrozenList([[&#39;a&#39;], [&#39;b&#39;, &#39;c&#39;]])] . #df.columns = df.columns.droplevel() df.columns = [col[1] for col in df.columns] #df.columns = [&#39;_&#39;.join(col) for col in df.columns] df .",
            "url": "https://code86.github.io/ureca/2020/09/17/CFS-ureca-evaluation.html",
            "relUrl": "/2020/09/17/CFS-ureca-evaluation.html",
            "date": " • Sep 17, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://code86.github.io/ureca/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://code86.github.io/ureca/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "",
          "url": "https://code86.github.io/ureca/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://code86.github.io/ureca/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}